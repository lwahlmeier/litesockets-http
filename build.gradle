allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'maven'
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  if(project.hasProperty("sonatypeUsername")) {
    apply plugin: 'signing'
  }


  repositories {
    mavenCentral()
    maven {
      url "http://oss.sonatype.org/content/groups/public/"
    }
  }

  test {
    jacoco {
      excludes = ['**/package-info**','**/*Test']
      destinationFile = file("$buildDir/reports/jacoco/test.exec")
    }
    getReports().getJunitXml().setDestination(file("${buildDir}/reports/tests/xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/tests/html"))
    setBinResultsDir(file("${buildDir}/reports/tests/bin"))
  }

  checkstyle {
    configFile = "${rootDir}/config/checkstyle/checkstyle.xml" as File
  }

  build.dependsOn("jacocoTestReport");

  jacocoTestReport {
    doFirst {
      classDirectories = fileTree(dir: 'build/classes/main', include: 'org/threadly/**')
      sourceDirectories = fileTree(dir: 'scr/main/java', include: 'org/threadly/**')
    }
    reports {
      csv.enabled false
      xml.enabled true
      xml.destination "${buildDir}/reports/jacoco/jacoco.xml"
      html.enabled true
      html.destination "${buildDir}/reports/jacoco/html"
    }
    doLast {
      println "Test results available at:"
      println "html - $buildDir/reports/tests/html/index.html"
      println "Test coverage reports available at:"
      println "html - $buildDir/reports/jacoco/html/index.html"
      println "xml  - $buildDir/reports/jacoco/jacoco.xml"
    }
  }

  compileJava {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-deprecation" << "-Werror"
  }

  compileTestJava {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-deprecation" << "-Werror"
  }

  plugins.withType(JavaPlugin) {
    checkstyle.sourceSets = [sourceSets.main]
  }

  jar {
    manifest {
      attributes 'Implementation-Title': 'litesockets-http', 'Implementation-Version': version
    }
  }

  javadoc {
    source = sourceSets.main.allJava
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
  }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
  }

  artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
  }

  if(project.hasProperty("sonatypeUsername")) {

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    compileJava {
      String[] java6Paths = new String[5]
      java6Paths[0] = "/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/rt.jar"
      java6Paths[1] = "/usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar"
      java6Paths[2] = "/usr/lib/jvm/java-1.6.0-openjdk-amd64/jre/lib/rt.jar"
      java6Paths[3] = "/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/rt.jar"
      java6Paths[4] = "/usr/lib/jvm/java-6-sun/jre/lib/rt.jar"
      for (String path : java6Paths) {
        if (new java.io.File(path).exists()) {
          println 'Using java 6 rt.jar: ' + path
          options.bootClasspath = path
          break
        }
      }
      if (options.bootClasspath == null) {
        println 'Unable to find java 6 rt.jar, will cause failure so exiting now'
        println ''
        System.exit(1)
      }
    }

    compileTestJava {
      options.compilerArgs << "-Xlint:all" << "-Xlint:-deprecation" << "-Werror"
  
      String[] java6Paths = new String[5]
      java6Paths[0] = "/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/rt.jar"
      java6Paths[1] = "/usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar"
      java6Paths[2] = "/usr/lib/jvm/java-1.6.0-openjdk-amd64/jre/lib/rt.jar"
      java6Paths[3] = "/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/rt.jar"
      java6Paths[4] = "/usr/lib/jvm/java-6-sun/jre/lib/rt.jar"
      for (String path : java6Paths) {
        if (new java.io.File(path).exists()) {
          options.bootClasspath = path
          break
        }
      }
    }
    signing {
      sign configurations.archives
    }
    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment {
            MavenDeployment deployment -> signing.signPom(deployment)
          }

          repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
          }
          snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
          }

          pom.project {
            name 'LiteSockets-HTTP'
            packaging 'jar'
            description ''
            url 'https://github.com/threadly/litesockets-http'

            scm {
              url 'scm:git@github.com:threadly/litesockets-http.git'
              connection 'scm:git@github.com:threadly/litesockets-http.git'
              developerConnection 'scm:git@github.com:threadly/litesockets-http.git'
            }

            licenses {
              license {
                name 'The MIT License (MIT)'
                url 'http://opensource.org/licenses/MIT'
                distribution 'repo'
              }
            }

            developers {
              developer {
                id 'lwahlmeier'
                name 'Luke Wahlmeier'
              }
              developer {
                id 'jent'
                name 'Mike Jensen'
              }
            }
          }
        }
      }
    }
  }
}
