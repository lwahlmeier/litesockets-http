apply from: 'build.shared'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
  String[] java8Paths = new String[9]
  java8Paths[0] = "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/"
  java8Paths[1] = "/usr/lib/jvm/java-8-openjdk/jre/lib/"
  java8Paths[2] = "/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/"
  java8Paths[3] = "/usr/lib/jvm/java-1.8.0-openjdk/jre/lib/"
  java8Paths[4] = "/usr/lib/jvm/java-8-sun/jre/lib/"
  java8Paths[5] = "/usr/lib/jvm/jdk1.8.0_122/jre/lib/"
  java8Paths[6] = "/usr/lib/jvm/jdk1.8.0_65/jre/lib/"
  java8Paths[7] = "/usr/lib/jvm/jdk1.8.0_45/jre/lib/"
  java8Paths[8] = "/usr/lib/jvm/jdk1.8.0_20/jre/lib/"
  for (String path : java8Paths) {
    if (new java.io.File(path).exists()) {
      println 'Using java 8: ' + path
      options.bootClasspath = fileTree(include: ['*.jar'], dir: path).join(File.pathSeparator)
      break
    }
  }
  if (options.bootClasspath == null) {
    println 'Unable to find java 8 rt.jar, will cause failure so exiting now'
    println ''
    System.exit(1)
  }
}

compileTestJava {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-deprecation" << "-Werror"

  String[] java8Paths = new String[9]
  java8Paths[0] = "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/"
  java8Paths[1] = "/usr/lib/jvm/java-8-openjdk/jre/lib/"
  java8Paths[2] = "/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/"
  java8Paths[3] = "/usr/lib/jvm/java-1.8.0-openjdk/jre/lib/"
  java8Paths[4] = "/usr/lib/jvm/java-8-sun/jre/lib/"
  java8Paths[5] = "/usr/lib/jvm/jdk1.8.0_122/jre/lib/"
  java8Paths[6] = "/usr/lib/jvm/jdk1.8.0_65/jre/lib/"
  java8Paths[7] = "/usr/lib/jvm/jdk1.8.0_45/jre/lib/"
  java8Paths[8] = "/usr/lib/jvm/jdk1.8.0_20/jre/lib/"
  for (String path : java8Paths) {
    if (new java.io.File(path).exists()) {
      options.bootClasspath = fileTree(include: ['*.jar'], dir: path).join(File.pathSeparator)
      break
    }
  }
}

signing {
  sign configurations.archives
}



uploadArchives {

  repositories {
    mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }
 
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
 
      pom.project {
        name 'litesockets-http-protocol'
        packaging 'jar'
        description 'A light weight http protocol parsing library.  This library is used to parse http requests.  The parsing happens completely independant of any networking.'
        url 'https://github.com/threadly/litesockets-http'
 
        scm {
          url 'scm:git@github.com:threadly/litesockets-http.git'
          connection 'scm:git@github.com:threadly/litesockets-http.git'
          developerConnection 'scm:git@github.com:threadly/litesockets-http.git'
        }

        licenses {
          license {
            name 'Mozilla Public License Version 2.0'
            url 'https://www.mozilla.org/MPL/2.0/'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'lwahlmeier'
            name 'Luke Wahlmeier'
          }
          developer {
            id 'jent'
            name 'Mike Jensen'
          }
        }
      }
    }
  }
}
